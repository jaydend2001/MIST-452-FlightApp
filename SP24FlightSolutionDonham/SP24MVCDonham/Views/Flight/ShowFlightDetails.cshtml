@model Flight
@{
    ViewData["Title"] = "Flight Details";
}

<h1>Flight Details</h1>

<br/>

<a asp-controller="Ticket" asp-action="PurchaseTicket"
   asp-route-flightID="@Model.FlightID" 
   class="btn btn-outline-success
    @((Model.FlightStatus != FlightStatus.Planned
    && Model.FlightStatus != FlightStatus.Delayed) ||
    (Model.Tickets.Count() >= Model.Plane.Capacity) ? "disabled" : "")"
>
    Purchase Ticket
</a>

@if (User.IsInRole("Administrator") || User.IsInRole("Employee"))
{
    @if (Model.FlightStatus == FlightStatus.Planned)
    {
        <a class="btn btn-warning"
        asp-controller="Flight"
        asp-action="EditFlightStatus"
        asp-route-flightID="@Model.FlightID"
        asp-route-FlightStatus="@FlightStatus.Delayed">
            <i class="bi bi-airplane"></i> Flight Delayed
        </a>
    }

    @if (Model.FlightStatus == FlightStatus.Planned || Model.FlightStatus == FlightStatus.Delayed)
    {
        <a class="btn btn-primary"
        asp-controller="Flight"
        asp-action="EditFlightStatus"
        asp-route-flightID="@Model.FlightID"
        asp-route-FlightStatus="@FlightStatus.Departed">
            <i class="bi bi-airplane"></i> Flight Departed
        </a>
    }

    @if (Model.FlightStatus == FlightStatus.Departed)
    {
        <a class="btn btn-primary"
        asp-controller="Flight"
        asp-action="EditFlightStatus"
        asp-route-flightID="@Model.FlightID"
        asp-route-FlightStatus="@FlightStatus.Arrived">
            <i class="bi bi-airplane"></i> Flight Arrived
        </a>
    }

    @if (Model.FlightStatus == FlightStatus.Planned || Model.FlightStatus == FlightStatus.Delayed)
    {
        <a class="btn btn-danger"
        asp-controller="Flight"
        asp-action="EditFlightStatus"
        asp-route-flightID="@Model.FlightID"
        asp-route-FlightStatus="@FlightStatus.Cancelled">
            <i class="bi bi-airplane"></i> Flight Cancelled
        </a>
    }

    <a class="btn btn-warning"
    asp-controller="Flight"
    asp-action="EditFlight"
    asp-route-flightID="@Model.FlightID">
        <i class="bi bi-pencil-square"></i> Edit Flight
    </a>
}

<br/>
<br/>

<table class="table table-bordered table-striped">
    <tr>
        <td>Flight ID</td>
        <td>@Model.FlightID</td>
    </tr>
    <tr>
        <td>Flight Status</td>
        <td>@Model.FlightStatus</td>
    </tr>
    <tr>
        <td>Duration</td>
        <td>@Model.Duration</td>
    </tr>
</table>

<h3>Flight Airport Information</h3>
<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>Airport Type</th>
            <th>ID</th>
            <th>Abbreviation</th>
            <th>Name</th>
            <th>Number of Gates</th>
            <th>Flight Time</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Departure</td>
            <td>@Model.DepartureAirport.AirportID</td>
            <td>@Model.DepartureAirport.Abbreviation</td>
            <td>@Model.DepartureAirport.AirportName</td>
            <td>@Model.DepartureAirport.NumberOfGates</td>
            <td>@Model.DepartureDateTime</td>
        </tr>
        <tr>
            <td>Arrival</td>
            <td>@Model.ArrivalAirport.AirportID</td>
            <td>@Model.ArrivalAirport.Abbreviation</td>
            <td>@Model.ArrivalAirport.AirportName</td>
            <td>@Model.ArrivalAirport.NumberOfGates</td>
            <td>@Model EstimatedArrivalDateTime</td>
        </tr>
    </tbody>
</table>

@if (ViewBag.departureAirportMapMarker != null && ViewBag.arrivalAirportMapMarker != null)
{
    <p><i>Departure Airport = Blue Map Marker --> Arrival Airport = Green Map Marker</i></p>
    <div id="map" style="height: 400px;"></div>
    <link rel="stylesheet" href="https://atlas.microsoft.com/sdk/css/atlas.min.css?api-version=2.0" />
    <script src="https://atlas.microsoft.com/sdk/js/atlas.min.js?api-version=2.0"></script>
    <script>
        var map, datasource, line;
        var map = new atlas.Map('map', {
            center: [-95.7715563417, 40.9672433944],
            zoom: 3,
            view: 'Auto',
            authOptions: {
                authType: 'subscriptionKey',
                subscriptionKey: '4ATSIAHq9Ckz9ZGXzEKBNcUKcZnz0SkwYoOL6qVoHrrFxV0RPrltJQQJ99AJACYeBjFChmOuAAAgAZMP1JXW'
            }
        });

        map.events.add('ready', function () {
            //Create a data source and add it to the map.
            datasource = new atlas.source.DataSource();
            map.sources.add(datasource);

            //Create a layer that defines how to render the line on the map.
            map.layers.add(new atlas.layer.LineLayer(datasource, null, {
                strokeColor: 'red',
                strokeWidth: 5
            }))

            //Create a line object and wrap it with the Shape class for easier updating.
            line = new atlas.Shape(new atlas.data.Feature(new atlas.data.lineString([0, 0], [0, 0]])));
            datasource.add(line);

            var departureAirportMapMarker = @Html.Raw(ViewBag.departureAirportMapMarker);
            var arrivalAirportMapMarker = @Html.Raw(ViewBag.arrivalAirportMapMarker);

            var marker = new atlas.HtmlMarker({
                color: departureAirportMapMarker.Color,
                text: departureAirportMapMarker.Label,
                position: [departureAirportMapMarker.Longitude, departureAirportMapMarker.Latitude],
            })
            map.markers.add(marker);

            marker = new atlas.HtmlMarker({
                color: arrivalAirportMapMarker.Color,
                text: arrivalAirportMapMarker.Label,
                position: [arrivalAirportMapMarker.Longitude, arrivalAirportMapMarker.Latitude],
            })
            map.markers.add(marker);

            line.setCoordinates([[departureAirportMapMarker.Longitude, departureAirportMapMarker.Latitude], 
            [arrivalAirportMapMarker.Longitude, arrivalAirportMapMarker.Latitude]]);
        })
    </script>
}
<br />
@if (User.IsInRole("Administrator") || User.IsInRole("Employee"))
{
    <h3>Tickets Sold</h3>
    @if (Model.Tickets.Any())
    {
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Ticket ID</th>
                    <th>Ticketholder</th>
                    <th>Purchase Date/Time</th>
                    <th>Price</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Ticket ticket in Model.Tickets)
                {
                    <tr>
                        <td>@ticket.TicketID</td>
                        <td>@ticket.AppUser.FullName</td>
                        <td>@ticket.PurchaseDateTime</td>
                        <td>@ticket.PurchasePrice</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p class="text-danger">This flight has no tickets sold yet!</p>
    }
}